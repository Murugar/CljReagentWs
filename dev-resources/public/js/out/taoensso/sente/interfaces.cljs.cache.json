["^ ","~:name","~$taoensso.sente.interfaces","~:doc","Alpha, subject to change.\n  Public interfaces / extension points.","~:excludes",["~#set",[]],"~:use-macros",null,"~:require-macros",["^ ","~$enc","~$taoensso.encore","^8","^8"],"~:uses",null,"~:requires",["^ ","^7","^8","^8","^8"],"~:imports",null,"~:defs",["^ ","~$IServerChan",["^ ","~:meta",["^ ","~:file","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","~:line",13,"~:column",14,"~:end-line",13,"~:end-column",25,"^2",null,"~:protocol-symbol",true,"~:jsdoc",["~#list",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$sch-open?",[["~$sch"]],"~$sch-close!",[["^J"]],"~$sch-send!",[["^J","~$websocket?","~$msg"]]]]],"^D",true,"^0","~$taoensso.sente.interfaces/IServerChan","^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",25,"^A",1,"^@",13,"^G",["^ ","^H",["^ ","^I",[["^J"]],"^K",[["^J"]],"^L",[["^J","^M","^N"]]]],"~:info",null,"^B",13,"~:impls",["^4",[]],"^2",null,"^E",["^F",["@interface"]]],"^I",["^ ","~:protocol-inline",null,"^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",16,"^A",4,"^B",16,"^C",13,"~:protocol","^O","^2","Returns true iff the channel is currently open.","~:arglists",["^F",["~$quote",["^F",[["^J"]]]]]],"^S","^O","^0","~$taoensso.sente.interfaces/sch-open?","~:variadic",false,"^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",13,"~:method-params",["^F",[["^J"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^A",1,"^@",13,"^B",16,"~:max-fixed-arity",1,"~:fn-var",true,"^T",["^F",["^U",["^F",[["^J"]]]]],"^2","Returns true iff the channel is currently open."],"^K",["^ ","^R",null,"^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",17,"^A",4,"^B",17,"^C",14,"^S","^O","^2","If the channel is open when called: closes the channel and returns true.\n    Otherwise noops and returns false.","^T",["^F",["^U",["^F",[["^J"]]]]]],"^S","^O","^0","~$taoensso.sente.interfaces/sch-close!","^W",false,"^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",14,"^X",["^F",[["^J"]]],"^Y",null,"^Z",["^F",[null,null]],"^A",1,"^@",13,"^B",17,"^[",1,"^10",true,"^T",["^F",["^U",["^F",[["^J"]]]]],"^2","If the channel is open when called: closes the channel and returns true.\n    Otherwise noops and returns false."],"^L",["^ ","^R",null,"^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",20,"^A",4,"^B",20,"^C",13,"^S","^O","^2","If the channel is open when called: sends a message over channel and\n    returns true. Otherwise noops and returns false.","^T",["^F",["^U",["^F",[["^J","^M","^N"]]]]]],"^S","^O","^0","~$taoensso.sente.interfaces/sch-send!","^W",false,"^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",13,"^X",["^F",[["^J","^M","^N"]]],"^Y",null,"^Z",["^F",[null,null]],"^A",1,"^@",13,"^B",20,"^[",3,"^10",true,"^T",["^F",["^U",["^F",[["^J","^M","^N"]]]]],"^2","If the channel is open when called: sends a message over channel and\n    returns true. Otherwise noops and returns false."],"~$IServerChanAdapter",["^ ","^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",24,"^A",14,"^B",24,"^C",32,"^2",null,"^D",true,"^E",["^F",["@interface"]],"^G",["^ ","^H",["^ ","~$ring-req->server-ch-resp",[["~$sch-adapter","~$ring-req","~$callbacks-map"]]]]],"^D",true,"^0","~$taoensso.sente.interfaces/IServerChanAdapter","^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",32,"^A",1,"^@",24,"^G",["^ ","^H",["^ ","^14",[["^15","^16","^17"]]]],"^P",null,"^B",24,"^Q",["^4",[]],"^2",null,"^E",["^F",["@interface"]]],"^14",["^ ","^R",null,"^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",27,"^A",4,"^B",27,"^C",28,"^S","^18","^2","Given a Ring request (WebSocket handshake or Ajax GET/POST), returns\n    a Ring response map with a web-server-specific channel :body that\n    implements Sente's IServerChan protocol.\n\n    Configures channel callbacks with a callbacks map using keys:\n      :on-open  - (fn [server-ch websocket?]) called exactly once after\n                  channel is available for sending.\n      :on-close - (fn [server-ch websocket? status]) called exactly once\n                  after channel is closed for any cause, incl. an explicit\n                  call to `close!`. `status` type is currently undefined.\n      :on-msg   - (fn [server-ch websocket? msg]) called for each String or\n                  byte[] message received from client.\n      :on-error - (fn [server-ch websocket? error]) currently unused.","^T",["^F",["^U",["^F",[["^15","^16","^17"]]]]]],"^S","^18","^0","~$taoensso.sente.interfaces/ring-req->server-ch-resp","^W",false,"^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",28,"^X",["^F",[["^15","^16","^17"]]],"^Y",null,"^Z",["^F",[null,null]],"^A",1,"^@",24,"^B",27,"^[",3,"^10",true,"^T",["^F",["^U",["^F",[["^15","^16","^17"]]]]],"^2","Given a Ring request (WebSocket handshake or Ajax GET/POST), returns\n    a Ring response map with a web-server-specific channel :body that\n    implements Sente's IServerChan protocol.\n\n    Configures channel callbacks with a callbacks map using keys:\n      :on-open  - (fn [server-ch websocket?]) called exactly once after\n                  channel is available for sending.\n      :on-close - (fn [server-ch websocket? status]) called exactly once\n                  after channel is closed for any cause, incl. an explicit\n                  call to `close!`. `status` type is currently undefined.\n      :on-msg   - (fn [server-ch websocket? msg]) called for each String or\n                  byte[] message received from client.\n      :on-error - (fn [server-ch websocket? error]) currently unused."],"~$IPacker",["^ ","^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",44,"^A",14,"^B",44,"^C",21,"^2","Extension pt. for client<->server comms data un/packers:\n  arbitrary Clojure data <-> serialized strings.","^D",true,"^E",["^F",["@interface"]],"^G",["^ ","^H",["^ ","~$pack",[["~$_","~$x"]],"~$unpack",[["~$_","~$x"]]]]],"^D",true,"^0","~$taoensso.sente.interfaces/IPacker","^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",21,"^A",1,"^@",44,"^G",["^ ","^H",["^ ","^1;",[["~$_","~$x"]],"^1<",[["~$_","~$x"]]]],"^P",null,"^B",44,"^Q",["^4",[]],"^2","Extension pt. for client<->server comms data un/packers:\n  arbitrary Clojure data <-> serialized strings.","^E",["^F",["@interface"]]],"^1;",["^ ","^R",null,"^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",47,"^A",4,"^B",47,"^C",8,"^S","^1=","^2",null,"^T",["^F",["^U",["^F",[["~$_","~$x"]]]]]],"^S","^1=","^0","~$taoensso.sente.interfaces/pack","^W",false,"^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",8,"^X",["^F",[["~$_","~$x"]]],"^Y",null,"^Z",["^F",[null,null]],"^A",1,"^@",44,"^B",47,"^[",2,"^10",true,"^T",["^F",["^U",["^F",[["~$_","~$x"]]]]],"^2",null],"^1<",["^ ","^R",null,"^>",["^ ","^?","/home/iqmsoft/clojure/rente/dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^@",48,"^A",4,"^B",48,"^C",10,"^S","^1=","^2",null,"^T",["^F",["^U",["^F",[["~$_","~$x"]]]]]],"^S","^1=","^0","~$taoensso.sente.interfaces/unpack","^W",false,"^?","dev-resources/public/js/out/taoensso/sente/interfaces.cljs","^C",10,"^X",["^F",[["~$_","~$x"]]],"^Y",null,"^Z",["^F",[null,null]],"^A",1,"^@",44,"^B",48,"^[",2,"^10",true,"^T",["^F",["^U",["^F",[["~$_","~$x"]]]]],"^2",null]]]